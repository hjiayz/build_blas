# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: init
        run: |
          wget -q https://dl.google.com/android/repository/android-ndk-r22-linux-x86_64.zip
          unzip android-ndk-r22-linux-x86_64.zip > /dev/null
          git clone https://github.com/flame/blis.git
      # Runs a set of commands using the runners shell
      - name: Cache
        uses: actions/cache@v2.1.3
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: |
            ~/android-ndk-r22
            ~/blis
          # An explicit key for restoring and saving the cache
          key: ${{ runner.os }}-${{ hashFiles('~/lockfiles') }}
      - name: build
        run: |
          cd blis
          git checkout 0.8.0
          export Host=linux-x86_64
          export NDK=~/android-ndk-r22
          export TOOLCHAIN=$NDK/toolchains/llvm/prebuilt/$Host
          export TARGET=aarch64-linux-android
          export CC_TARGET=aarch64-linux-android
          export API=29
          export AR=$TOOLCHAIN/bin/$TARGET-ar
          export AS=$TOOLCHAIN/bin/$TARGET-as
          export CC=$TOOLCHAIN/bin/$CC_TARGET$API-clang
          export CXX=$TOOLCHAIN/bin/$CC_TARGET$API-clang++
          export LD=$TOOLCHAIN/bin/$TARGET-ld
          export RANLIB=$TOOLCHAIN/bin/$TARGET-ranlib
          export STRIP=$TOOLCHAIN/bin/$TARGET-strip
          export READELF=$TOOLCHAIN/bin/$TARGET-readelf
          ./configure --prefix=~/zip/$TARGET
          make -j 8
          make install 
          cd ..
